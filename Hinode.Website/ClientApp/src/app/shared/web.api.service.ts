/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {Injector} from '@angular/core';
import {of} from 'rxjs';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const SPA_BASE_URL = new InjectionToken<string>('SPA_BASE_URL');

export class ServiceBase {
  constructor(injector: Injector) {
  }

  protected getBaseUrl(token: string): string{
    return "";
  }

  protected transformOptions(options: {headers: any}): any{
    options.headers = options.headers.append('Cache-Control', 'no-cache');
    options.headers = options.headers.append('Pragma', 'no-cache');
    options.headers = options.headers.append('Expires', 'Sat, 01 Jan 2000 00:00:00 GMT');
    return of(options);
  }
}

@Injectable({
    providedIn: 'root'
})
export class CommandService extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Injector) configuration: Injector, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(SPA_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("spa");
    }

    list(): Observable<CommandInfo[]> {
        let url_ = this.baseUrl + "/api/command";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<CommandInfo[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CommandInfo[]>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<CommandInfo[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CommandInfo.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CommandInfo[]>(<any>null);
    }

    categoryList(category: number): Observable<CommandInfo[]> {
        let url_ = this.baseUrl + "/api/command/{category}";
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined.");
        url_ = url_.replace("{category}", encodeURIComponent("" + category));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processCategoryList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoryList(<any>response_);
                } catch (e) {
                    return <Observable<CommandInfo[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CommandInfo[]>><any>_observableThrow(response_);
        }));
    }

    protected processCategoryList(response: HttpResponseBase): Observable<CommandInfo[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CommandInfo.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CommandInfo[]>(<any>null);
    }
}

export class CommandInfo implements ICommandInfo {
    categories?: CommandCategory[] | null;
    location?: Location;
    command?: string | null;
    summary?: string | null;
    usages?: string[] | null;

    constructor(data?: ICommandInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
            this.location = _data["location"] !== undefined ? _data["location"] : <any>null;
            this.command = _data["command"] !== undefined ? _data["command"] : <any>null;
            this.summary = _data["summary"] !== undefined ? _data["summary"] : <any>null;
            if (Array.isArray(_data["usages"])) {
                this.usages = [] as any;
                for (let item of _data["usages"])
                    this.usages!.push(item);
            }
        }
    }

    static fromJS(data: any): CommandInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CommandInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["command"] = this.command !== undefined ? this.command : <any>null;
        data["summary"] = this.summary !== undefined ? this.summary : <any>null;
        if (Array.isArray(this.usages)) {
            data["usages"] = [];
            for (let item of this.usages)
                data["usages"].push(item);
        }
        return data; 
    }
}

export interface ICommandInfo {
    categories?: CommandCategory[] | null;
    location?: Location;
    command?: string | null;
    summary?: string | null;
    usages?: string[] | null;
}

export enum CommandCategory {
    Registration = 1,
    Training = 2,
    Referral = 3,
    UserInfo = 4,
    UserInfoInteraction = 5,
    WorldInfo = 6,
    Transit = 7,
    Shop = 8,
    Explore = 9,
    Box = 10,
    Market = 11,
    Achievements = 12,
    Collection = 13,
    Cards = 14,
    Inventory = 15,
    Building = 16,
    Cooking = 17,
    Crafting = 18,
    Field = 19,
    Contract = 20,
    Family = 21,
    Casino = 22,
    Rating = 23,
}

export enum Location {
    InTransit = 0,
    Capital = 1,
    Garden = 2,
    Seaport = 3,
    Castle = 4,
    Village = 5,
    ExploreGarden = 6,
    ExploreCastle = 8,
    Fishing = 9,
    CapitalCasino = 10,
    CapitalMarket = 11,
    CapitalShop = 12,
    FieldWatering = 13,
    WorkOnContract = 14,
    MakingCrafting = 15,
    MakingAlcohol = 16,
    MakingFood = 17,
    MakingDrink = 18,
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}